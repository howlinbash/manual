
==Javascript==

function foo() {
  console.log(this);
}

The scope has changed, but the context remains the same.
this, inside console.log, will refer to the root, the window object perhaps.
by putting it inside the foo function (or perhaps the log method?) we have changed the scope...
...but not the context.

A function runs within the scope of the object it sits in. So 

foo()

will be the same as

window.foo()

var obj = {
  foo: function () {
    console.log(this === obj);
  }
}
obj.foo();

The example above illustrates that the obj is now the context.
The context is no longer window

==Changing Context==

call
apply
bind

obj.foo.call(window);

now if we run the same foo method above (this === window);

to pass arguments through this function we can use this technique

var obj = {
  foo: function (one, two, three) {
    console.log(this === window);
  }
}
obj.foo.call(window, 1,2,3);

whatever i put in 1 will come through in one, etc...

apply is the same except the second argument is an array like this.

obj.foo.apply(window, [1,2,3]);

both call and apply call the foo function bind, however, does not.

Bind, returns a bound function

var myBoundFoo = obj.foo.bind(window);

so myBoundFoo() always executes foo with the context 'window' instead of obj.

==Methods to get round scoping problems==

If i'm trying to use this in the below example,
this in line 4 is not referring to the same obj as this in line 2
this(l4) is referring to $('#div1')
this(l2) is referring to $('#opendiv')

$('#opendiv').on('click', function() {
  this;
  $('#div1').slideToggle(300, function() {
    $(this).toggleClass("active");
  });
});

You can get round this a number of ways.

# Scope Method

Because the function on line 3 was created in the scope of the function on line 1
I do have access to the this is on line 2
we can look in the parent scope (but not the child scope).

$('#opendiv').on('click', function() {
  var opendiv = this;
  $('#div1').slideToggle(300, function() {
    $(opendiv).toggleClass("active");
  });
});

# Bind Method

By throwing the bind on the end of function on line 3
the callback on line 4 refers to #opendiv

$('#opendiv').on('click', function() {

  $('#div1').slideToggle(300, function() {
    $().toggleClass("active");
  }.bind(this));
});

1 caveat. we cannot make this equal '#div1' anymore.
the bind method appending the function means this will 
now always equal '#opendiv'
